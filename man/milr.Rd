% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/milr.R
\name{milr}
\alias{milr}
\title{Maximum likelihood estimation of multiple-instance logistic regression with LASSO penalty}
\usage{
milr(y, x, bag, lambda = 0, lambdaCriterion = "BIC", nfold = 10,
  maxit = 500)
}
\arguments{
\item{y}{A vector. Binay response.}

\item{x}{The design matrix. The number of rows of x must be equal to the length of y.}

\item{bag}{A vector, bag id.}

\item{lambda}{The penalty for LASSO. Default is 0 (not use LASSO). If \code{lambda} is vector, 
the penalty will be chosen by BIC.
  If \code{lambda} = 0, then the penalty will be chosen automatically.}

\item{lambdaCriterion}{A string, the criterion to choose the penalty term. 
It can be "BIC" or "deviance".}

\item{nfold}{An integer, the number of fold for cross-validation to choose the penalty term. 
(only used in lambdaCriterion = "dev".)}

\item{maxit}{An integer, the maximum iteration for EM algorithm.}
}
\value{
An list includes deviance (not cv deviance), BIC, chosen lambda, coefficients, 
 fitted values, log-likelihood and variances of coefficients.
}
\description{
Please refer to \link{milr-package}.
}
\examples{
set.seed(100)
beta <- runif(5, -5, 5)
trainData <- DGP(70, 3, beta)
testData <- DGP(30, 3, beta)
# default (not use LASSO)
milr_result <- milr(trainData$Z, trainData$X, trainData$ID)
coef(milr_result)      # coefficients
fitted(milr_result)    # fitted values
summary(milr_result)   # summary milr
predict(milr_result, testData$X, testData$ID) # predicted label

# use BIC to choose penalty
milr_result <- milr(trainData$Z, trainData$X, trainData$ID,
  exp(seq(log(0.01), log(50),length = 30)))
coef(milr_result)      # coefficients
fitted(milr_result)    # fitted values
summary(milr_result)   # summary milr
predict(milr_result, testData$X, testData$ID) # predicted label

# use auto-tuning
milr_result <- milr(trainData$Z, trainData$X, trainData$ID, lambda = -1)
coef(milr_result)      # coefficients
fitted(milr_result)    # fitted values
summary(milr_result)   # summary milr
predict(milr_result, testData$X, testData$ID) # predicted label

# use cv in auto-tuning
milr_result <- milr(trainData$Z, trainData$X, trainData$ID, 
                    lambda = -1, lambdaCriterion = "deviance")
coef(milr_result)      # coefficients
fitted(milr_result)    # fitted values
summary(milr_result)   # summary milr
predict(milr_result, testData$X, testData$ID) # predicted label
}

